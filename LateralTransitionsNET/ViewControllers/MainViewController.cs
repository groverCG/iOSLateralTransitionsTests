// This file has been autogenerated from a class added in the UI designer.

using System;
using LateralTransitionsNET.Cells;
using LateralTransitionsNET.Views;

namespace LateralTransitionsNET
{
	public partial class MainViewController : UIViewController
    {
        public SegmentedButtonsView segmentedButtonsView;
        private UICollectionView collectionView;
        private string[] tabs = { "followers", "following" };
        private string[] following = { "spaceX", "bbc", "nasa" };
        private string[] followers = { "User1", "User2", "User3", "User4", "User5",  };
        
        private string[][] DataOptions { get; set; }

        public MainViewController(IntPtr handle) : base(handle)
        {
            DataOptions = new string[][]{ followers, following };
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            View.BackgroundColor = UIColor.White;
            ConfigCollectionView();
        }

        private void ConfigCollectionView()
        {
            var collectionViewFlowLayout = new UICollectionViewFlowLayout
            {
                ScrollDirection = UICollectionViewScrollDirection.Horizontal,
                MinimumInteritemSpacing = 1,
                MinimumLineSpacing = 1
            };

            collectionView = new UICollectionView(CGRect.Empty, collectionViewFlowLayout)
            {
                PagingEnabled = true,
                IndicatorStyle = UIScrollViewIndicatorStyle.White,
                BackgroundColor = UIColor.White
            };


            segmentedButtonsView = new SegmentedButtonsView();
            segmentedButtonsView.SetLabelsTitles(new string[] { "Followers", "Following" });
            segmentedButtonsView.TranslatesAutoresizingMaskIntoConstraints = false;
            segmentedButtonsView.BackgroundColor = UIColor.FromRGB(247, 247, 247);
            segmentedButtonsView.Layer.BorderColor = UIColor.FromRGB(223, 223, 223).CGColor;
            segmentedButtonsView.Layer.BorderWidth = 0.5f;
            segmentedButtonsView.DidIndexChanged += DidIndexChanged;
            View.AddSubview(segmentedButtonsView);

            segmentedButtonsView.RightAnchor.ConstraintEqualTo(View.RightAnchor).Active = true;
            segmentedButtonsView.LeftAnchor.ConstraintEqualTo(View.LeftAnchor).Active = true;
            segmentedButtonsView.TopAnchor.ConstraintEqualTo(View.TopAnchor, 86).Active = true;
            segmentedButtonsView.HeightAnchor.ConstraintEqualTo(40).Active = true;
            
            
            collectionView.RegisterClassForCell(typeof(CollectionViewCell), CollectionViewCell.ReuseIdentifier);
            collectionView.Delegate = new MainViewControllerDelegate(segmentedButtonsView, View);
            collectionView.DataSource = new MainViewControllerCollectionViewDataSource(tabs, DataOptions);

            View.AddSubview(collectionView);
            collectionView.TranslatesAutoresizingMaskIntoConstraints = false;
            collectionView.RightAnchor.ConstraintEqualTo(View.RightAnchor).Active = true;
            collectionView.LeftAnchor.ConstraintEqualTo(View.LeftAnchor).Active = true;
            collectionView.TopAnchor.ConstraintEqualTo(segmentedButtonsView.BottomAnchor).Active = true;
            collectionView.BottomAnchor.ConstraintEqualTo(View.BottomAnchor).Active = true;
        }
        
        public void DidIndexChanged(object sender, int index)
        {
            if (index == 0)
            {
                var collectionBounds = collectionView.Bounds;
                var contentOffset = (nfloat)Math.Floor(collectionView.ContentOffset.X - collectionBounds.Size.Width);
                MoveToFrame(contentOffset);
            }
            else if (index == 1)
            {
                var collectionBounds = collectionView.Bounds;
                var contentOffset = (nfloat)Math.Floor(collectionView.ContentOffset.X + collectionBounds.Size.Width);
                MoveToFrame(contentOffset);
            }
        }

        private void MoveToFrame(nfloat contentOffset)
        {
            var frame = new CoreGraphics.CGRect(contentOffset, collectionView.ContentOffset.Y, collectionView.Frame.Width, collectionView.Frame.Height);
            collectionView.ScrollRectToVisible(frame, true);
        }
    }

    public class MainViewControllerCollectionViewDataSource : UICollectionViewDataSource
    {
        private string[] Tabs { get; set; }
        private string[][] DataOptions { get; set; }
        public MainViewControllerCollectionViewDataSource(string[] tabs, string[][] dataOptions)
        {
            Tabs = tabs;
            DataOptions = dataOptions;
        }
        
        public override IntPtr NumberOfSections(UICollectionView collectionView)
        {
            return 1;
        }

        public override IntPtr GetItemsCount(UICollectionView collectionView, IntPtr section)
        {
            return Tabs.Length;
        }

        public override UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath)
        {
            var cell = (CollectionViewCell)collectionView.DequeueReusableCell(CollectionViewCell.ReuseIdentifier, indexPath);
            cell.tabType = Tabs[indexPath.Row];
            cell.currentData = DataOptions[indexPath.Row];
            cell.tableView.Source = new UserTableViewDataSource(cell.currentData, cell.tabType);
            return cell;
        }
    }

    public class MainViewControllerDelegate : UICollectionViewDelegateFlowLayout
    {
        public SegmentedButtonsView SegmentedButtonsView;
        public UIView ParentView;
        
        public MainViewControllerDelegate(SegmentedButtonsView segmentedButtonsView, UIView view)
        {
            SegmentedButtonsView = segmentedButtonsView;
            ParentView = view;
        }
        public override CGSize GetSizeForItem(UICollectionView collectionView, UICollectionViewLayout layout, NSIndexPath indexPath)
        {
            return new CoreGraphics.CGSize(ParentView.Frame.Width, ParentView.Frame.Height - 150);
        }

        public override UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, IntPtr section)
        {
            return UIEdgeInsets.Zero;
        }

        public override void Scrolled(UIScrollView scrollView)
        { 
            SegmentedButtonsView.CollectionViewDidScroll((float)scrollView.ContentOffset.X / 2);
        }
    }
}
